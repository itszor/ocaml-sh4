(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1998 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* Emission of SH4 assembly code *)

open Location
open Misc
open Cmm
open Arch
open Proc
open Reg
open Mach
open Linearize
open Emitaux

(* Tradeoff between code size and code speed *)

let fastcode_flag = ref true

(* Output a label *)

let label_prefix =
  match Config.system with
    "linux_elf" -> ".L"
  | "bsd_elf" -> ".L"
  | "solaris" -> ".L"
  | "beos" -> ".L"
  | "gnu" -> ".L"
  | _ -> "L"

let emit_label lbl =
  emit_string label_prefix; emit_int lbl

(* Output a symbol *)

let symbol_prefix =
  match Config.system with
    "linux_elf" -> ""
  | "bsd_elf" -> ""
  | "solaris" -> ""
  | "beos" -> ""
  | "gnu" -> ""
  | _ -> "_"

let emit_symbol s =
  emit_string symbol_prefix; Emitaux.emit_symbol '$' s

(* Output a pseudo-register *)

let emit_reg r =
  match r.loc with
    Reg r -> emit_string (register_name r)
  | _ -> fatal_error "Emit_sh4.emit_reg"

(* Output the next register after the given pseudo-register *)

let emit_next_reg r =
  match r.loc with
    Reg r -> emit_string (register_name(r + 1))
  | _ -> fatal_error "Emit_sh4.emit_next_reg"

(* High/low parts of a floating-point register. Note that a double-precision
   register is represented as two single-precision registers, like e.g.:
   
      31       0 31       0
     +----------+----------+
     |    fr0   |    fr1   |
     +---------------------+
     |         dr0         |
     +---------------------+
      63                  0

   So that the lower-numbered single-precision register has the "most
   significant" end of the double-precision value, i.e. high and low are the
   other way round to what one might expect.
*)

let emit_float_low r =
  match r.loc with
    Reg r -> emit_string ("fr" ^ (string_of_int ((r - 100) * 2 + 1)))
  | _ -> fatal_error "Emit_sh4.emit_float_low"

let emit_float_high r =
  match r.loc with
    Reg r -> emit_string ("fr" ^ (string_of_int ((r - 100) * 2)))
  | _ -> fatal_error "Emit_sh4.emit_float_low"

(* Layout of the stack frame *)

let stack_offset = ref 0

let frame_size () =
  !stack_offset +
  4 * num_stack_slots.(0) + 8 * num_stack_slots.(1) +
  (if !contains_calls then 4 else 0)

let slot_offset loc cl =
  match loc with
    Incoming n -> frame_size() + n
  | Local n ->
      if cl = 0
      then !stack_offset + num_stack_slots.(1) * 8 + n * 4
      else !stack_offset + n * 8
  | Outgoing n -> n

(* Output a stack reference *)

let emit_stack r =
  match r.loc with
    Stack s ->
      (* FIXME: This will overflow really fast. *)
      let ofs = slot_offset s (register_class r) in `@({emit_int ofs},r15)`
  | _ -> fatal_error "Emit_sh4.emit_stack"

(* Output an addressing mode *)

let emit_addressing addr r n =
  match addr with
    Iindexed ofs -> `@({emit_int ofs},{emit_reg r.(n)})`
  | Iindirect -> `@{emit_reg r.(n)}`

(* Record live pointers at call points *)

type frame_descr =
  { fd_lbl: int;                        (* Return address *)
    fd_frame_size: int;                 (* Size of stack frame *)
    fd_live_offset: int list }          (* Offsets/regs of live addresses *)

let frame_descriptors = ref([] : frame_descr list)

let record_frame live =
  let lbl = new_label() in
  let live_offset = ref [] in
  Reg.Set.iter
    (function
        {typ = Addr; loc = Reg r} ->
          live_offset := (r lsl 1) + 1 :: !live_offset
      | {typ = Addr; loc = Stack s} as reg ->
          live_offset := slot_offset s (register_class reg) :: !live_offset
      | _ -> ())
    live;
  frame_descriptors :=
    { fd_lbl = lbl;
      fd_frame_size = frame_size();
      fd_live_offset = !live_offset } :: !frame_descriptors;
  `{emit_label lbl}:`

let emit_frame fd =
  `	.long	{emit_label fd.fd_lbl} + 4\n`;
  `	.short	{emit_int fd.fd_frame_size}\n`;
  `	.short	{emit_int (List.length fd.fd_live_offset)}\n`;
  List.iter
    (fun n ->
      `	.short	{emit_int n}\n`)
    fd.fd_live_offset;
  `	.align	2\n`

(* Names of various instructions *)

let name_for_shift_operation = function
    Ilsl -> "shld"
  | Ilsr -> "shld"
  | Iasr -> "shad"
  | _ -> assert false

type cmp_type = Normal | Flipped | Inverted | InvFlipped

(* Returns name, and whether the arguments must be flipped or the result
   inverted *)

let name_for_comparison = function
    Isigned Ceq | Iunsigned Ceq -> "eq", Normal
  | Isigned Cne | Iunsigned Cne -> "eq", Inverted
  | Isigned Cge -> "ge", Normal
  | Isigned Cgt -> "gt", Normal
  | Isigned Clt -> "ge", Flipped
  | Isigned Cle -> "gt", Flipped
  | Iunsigned Cge -> "hs", Normal
  | Iunsigned Cgt -> "hi", Normal
  | Iunsigned Clt -> "hs", Flipped
  | Iunsigned Cle -> "hi", Flipped

let name_for_int_operation = function
    Iadd -> "add"
  | Isub -> "sub"
  | Iand -> "and"
  | Ior -> "or"
  | Ixor -> "xor"
  | _ -> assert false

let name_for_shift_imm_operation op size =
  match op, size with
    Ilsl, 16 -> "shll16"
  | Ilsl, 8 -> "shll8"
  | Ilsl, 2 -> "shll2"
  | Ilsl, 1 -> "shll"
  | Ilsr, 16 -> "shlr16"
  | Ilsr, 8 -> "shlr8"
  | Ilsr, 2 -> "shlr2"
  | Ilsr, 1 -> "shlr"
  | _ -> assert false

let name_for_float_operation = function
    Inegf -> "fneg"
  | Iabsf -> "fabs"
  | Iaddf -> "fadd"
  | Isubf -> "fsub"
  | Imulf -> "fmul"
  | Idivf -> "fdiv"
  | _ -> assert false

let name_for_float_comparison cmp neg =
  let cname, cmpact =
    match cmp with
      Ceq -> "eq", Normal
    | Cne -> "eq", Inverted
    | Cgt -> "gt", Normal
    | Clt -> "gt", Flipped
    | Cge -> "gt", InvFlipped
    | Cle -> "gt", Inverted in
  if not neg then
    cname, cmpact
  else
    cname, match cmpact with
      Normal -> Inverted
    | Inverted -> Normal
    | Flipped -> InvFlipped
    | InvFlipped -> Flipped
  
(* Recognize immediate operands (for mov/add) *)

let is_immediate n =
  n >= (Nativeint.of_int (-128)) && n < (Nativeint.of_int 128)

(* Name of current function *)
let function_name = ref ""
(* Entry point for tail recursive calls *)
let tailrec_entry_point = ref 0
(* Table of symbols referenced *)
let symbol_constants = (Hashtbl.create 11 : (string, int) Hashtbl.t)
(* Table of floating-point literals. Note we can't load these from constant
   pools embedded in code: maybe we shouldn't put float constants there at
   all. *)
let float_constants = (Hashtbl.create 11 : (string, int) Hashtbl.t)
(* Table of integer literals *)
let int_constants = (Hashtbl.create 11 : (string, int) Hashtbl.t)
(* Total space (in halfwords) occupied by pending literals *)
let num_literals = ref 0
(* True if we've at least one pending float literal *)
let pending_float = ref false

(* Label a symbol, int or float constant *)
let label_constant tbl s size =
  try
    Hashtbl.find tbl s
  with Not_found ->
    let lbl = new_label() in
    Hashtbl.add tbl s lbl;
    num_literals := !num_literals + size;
    lbl

(* Emit all pending constants *)

let emit_constants () =
  (* (Longword) constants must be word aligned. *)
  `	.align	2\n`;
  Hashtbl.iter
    (fun s lbl ->
      `{emit_label lbl}:        .long   {emit_symbol s}\n`)
    symbol_constants;
  Hashtbl.iter
    (fun s lbl ->
      `{emit_label lbl}:	.long	{emit_string s}\n`)
    int_constants;
  Hashtbl.iter
    (fun s lbl ->
      let n = Int64.bits_of_float (float_of_string s) in
      let lo = Int64.to_nativeint n in
      let hi = Int64.to_nativeint (Int64.shift_right n 32) in
      `{emit_label lbl}:        .long {emit_nativeint lo}\n`;
      `                         .long {emit_nativeint hi}\n`)
    float_constants;
  Hashtbl.clear symbol_constants;
  Hashtbl.clear float_constants;
  Hashtbl.clear int_constants;
  num_literals := 0;
  pending_float := false

let label_int_constant num =
  label_constant int_constants (Nativeint.to_string num) 2

(* Load a 32-bit constant into reg. FIXME: Can use a smarter strategy here,
   though with possible speed vs. size considerations, e.g.:

     - can load 128-255 using an extra extu.b
     - can load 0xff80 - 0xffff using an extra extu.w
     - can load some shifted constants using extra
       shll/shll2/shll8/shll16/rotl/rotr.
     - can load some permuted constants using extra swap.b, swap.w.

   All of these will take 4 bytes in total, vs. 6 for mov.l + constant pool
   entry, and potentially save icache space too.
*)

let load_const imm reg =
  if is_immediate imm then begin
    `	mov	#{emit_nativeint imm}, {emit_reg reg}\n`
  end else begin
    let lbl = label_int_constant imm in
    `	mov.l	{emit_label lbl}, {emit_reg reg} ! {emit_nativeint imm}\n`
  end

(* Add a 32-bit constant to reg. FIXME: can't do that without a temp, so this
   isn't very useful. *)

let add_const imm reg =
  if is_immediate imm then begin
    `	add	#{emit_nativeint imm}, {emit_reg reg}\n`
  end else
    fatal_error "Emit_sh4.add_const"

(* We need to be able to do this... but it'd be nice to not clobber r0 in the
   process. *)

let emit_stack_adjustment imm =
  if imm = Nativeint.of_int 0 then
    0
  else if is_immediate imm then begin
    `	add	#{emit_nativeint imm}, r15\n`; 1
  end else if imm > Nativeint.of_int 0 then begin
    load_const imm (phys_reg 0);
    `	add	r0, r15\n`; 2
  end else begin
    load_const (Nativeint.neg imm) (phys_reg 0);
    `	sub	r0, r15\n`; 2
  end

(* Output the assembly code for an instruction *)

let emit_instr i =
  match i.desc with
    Lend -> 0
  | Lop(Imove | Ispill | Ireload) ->
      let src = i.arg.(0) and dst = i.res.(0) in
      if src.loc = dst.loc then 0 else begin
        match (src, dst) with
          {loc = Reg rs; typ = Int|Addr}, {loc = Reg rd; typ = Int|Addr} ->
            `	mov	{emit_reg src}, {emit_reg dst}\n`; 1
        | {loc = Reg rs; typ = Float}, {loc = Reg rd; typ = Float} ->
            `	fmov	{emit_reg src}, {emit_reg dst}\n`; 1
        | {loc = Reg rs; typ = Float}, {loc = Reg rd; typ = Int|Addr} ->
	    (* Maybe just push/pop from stack instead.  *)
            `	flds	{emit_float_low src}, fpul\n`;
	    `	sts	fpul, {emit_reg dst}\n`;
	    `	flds	{emit_float_high src}, fpul\n`;
	    `	sts	fpul, {emit_next_reg dst}\n`; 4
        | {loc = Reg rs; typ = Int|Addr}, {loc = Stack sd} ->
	    `	mov.l	{emit_reg src}, {emit_stack dst}\n`; 1
        | {loc = Reg rs; typ = Float}, {loc = Stack sd} ->
            `	fmov	{emit_reg src}, {emit_stack dst}\n`; 1
        | {loc = Stack ss; typ = Int|Addr}, {loc = Reg rd} ->
	    `	mov.l	{emit_stack src}, {emit_reg dst}\n`; 1
        | {loc = Stack ss; typ = Float}, {loc = Reg rd} ->
	    (* Won't work either. *)
	    `	fmov	{emit_stack src}, {emit_reg dst}\n`; 1
        | _ ->
            assert false
      end
  | Lop(Iconst_int n) ->
      let r = i.res.(0) in
      if is_immediate n then begin
        `	mov	#{emit_nativeint n}, {emit_reg r}\n`; 1
      end else begin
	let lbl = label_int_constant n in
	`	mov.l	{emit_label lbl}, {emit_reg r} ! {emit_nativeint n}\n`; 1
      end
  | Lop(Iconst_float s) ->
      let r = i.res.(0) in
      begin match Int64.bits_of_float (float_of_string s) with
      (* fldi0/fldi1 are single-precision only. Might it win to use those and
	 convert to double-precision? (Definitely for size.) *)
      | _ ->
        let lbl = label_constant float_constants s 4 in
        pending_float := true;
	`	mova	{emit_label lbl}, r0\n`;
        `	fmov	@r0, {emit_reg r} ! {emit_string s}\n`; 2
      end
  | Lop(Iconst_symbol s) ->
      let lbl = label_constant symbol_constants s 2 in
      `	mov.l	{emit_label lbl}, {emit_reg i.res.(0)} ! {emit_symbol s}\n`; 1
  | Lop(Icall_ind) ->
      `{record_frame i.live}	jsr	@{emit_reg i.arg.(0)}\n`;
      `	nop\n`; 2  (* FIXME: Delay slot. *)
  | Lop(Icall_imm s) ->
      let lbl = label_constant symbol_constants s 2 in
      (* We can't really call immediate functions. An argument in r0 will get
	 destroyed. *)
      `	mov.l	{emit_label lbl}, r0\n`;
      `{record_frame i.live}	jsr	@r0\n`;
      `	nop\n`; 3
  | Lop(Itailcall_ind) ->
      let n = frame_size() in
      if !contains_calls then begin
	load_const (Nativeint.of_int (n - 4)) (phys_reg 0);
	`	add	r15, r0\n`;
        `	lds.l	@r0+, pr\n`
      end;
      let adj_insns = emit_stack_adjustment (Nativeint.of_int n) in
      `	jmp @{emit_reg i.arg.(0)}\n`;
      `	nop\n`; 5 + adj_insns
  | Lop(Itailcall_imm s) ->
      if s = !function_name then begin
	(* FIXME: Range check. *)
        `	bra	{emit_label !tailrec_entry_point}\n`;
	`	nop\n`; 2  (* FIXME: Delay slot. *)
      end else begin
        let n = frame_size() in
        if !contains_calls then begin
	  load_const (Nativeint.of_int (n - 4)) (phys_reg 0);
	  `	add	r15, r0\n`;
	  `	lds.l	@r0+, pr\n`;
	end;
	let adj_insns = emit_stack_adjustment (Nativeint.of_int n)
	and lbl = label_constant symbol_constants s 2 in
        `	mov.l	{emit_label lbl}, r0\n`;
	`{record_frame i.live}	jmp	@r0\n`;
	`	nop\n`; 6 + adj_insns
      end
  | Lop(Iextcall(s, alloc)) ->
      if alloc then begin
        let func = label_constant symbol_constants s 2
	and caml_c_call = label_constant symbol_constants "caml_c_call" 2 in
        `	mov.l	{emit_label func}, r11 ! {emit_symbol s}\n`;
	`	mov.l	{emit_label caml_c_call}, r10 ! caml_c_call\n`;
        `{record_frame i.live}	jsr	@r10\n`; 3
      end else begin
	let func = label_constant symbol_constants s 2 in
        `	mov.l	{emit_label func}, r11 ! {emit_symbol s}\n`;
	`	jsr	@r11\n`; 2
      end
  | Lop(Istackoffset n) ->
      let ninstr = emit_stack_adjustment (Nativeint.of_int n) in
      stack_offset := !stack_offset + n;
      ninstr
  | Lop(Iload(Single, addr)) ->
      let r = i.res.(0) in
      `	fmov.s	{emit_addressing addr i.arg 0}, {emit_float_low r}\n`;
      `	flds	{emit_float_low r}, fpul\n`;
      `	fcnvsd	fpul, {emit_reg r}\n`; 3
  | Lop(Iload((Double | Double_u), addr)) ->
      begin match addr with
        Iindirect | Iindexed 0 ->
	  let a = i.arg.(0)
	  and r = i.res.(0) in
	  `	fmov.s	@{emit_reg a}+, {emit_float_low r}\n`;
	  `	fmov.s	@{emit_reg a}, {emit_float_high r}\n`;
	  `	add	#-4, {emit_reg a}\n`; 3
      | _ -> assert false
      end
  | Lop(Iload(size, addr)) ->
      let r = i.res.(0) in
      let instr =
        match size with
        | Byte_signed -> "mov.b"
	| Byte_unsigned -> "mov.b"
        | Sixteen_signed -> "mov.w"
	| Sixteen_unsigned -> "mov.w"
	| Word | Thirtytwo_signed | Thirtytwo_unsigned -> "mov.l"
	| Double | Double_u | Single -> assert false in
	`	{emit_string instr}	{emit_addressing addr i.arg 0}, {emit_reg r}\n`;
	begin match size with
	  Byte_unsigned ->
	    `	extu.b	{emit_reg r}, {emit_reg r}\n`; 2
	| Sixteen_unsigned ->
	    `	extu.w	{emit_reg r}, {emit_reg r}\n`; 2
	| _ -> 1
	end
  | Lop(Istore(Single, addr)) ->
      let r = i.arg.(0) in
      `	fcnvds	{emit_reg r}, fpul\n`;
      `	fsts	fpul, {emit_float_low r}\n`;  (* FIXME: Clobbers src! *)
      `	fmov	{emit_float_low r}, {emit_addressing addr i.arg 0}\n`;
      3
  | Lop(Istore((Double | Double_u), addr)) ->
      let a = i.arg.(1)
      and r = i.arg.(0) in
      begin match addr with
        Iindirect | Iindexed 0 ->
	  `	add	#4, {emit_reg a}\n`;
	  `	fmov.s	{emit_float_high r}, @{emit_reg a}\n`;
	  `	fmov.s	{emit_float_low r}, @-{emit_reg a}\n`; 3
      | Iindexed n ->
          (* emit_stores creates floating-point stores with small offsets. Deal
	     with that here, though it's not very efficient to do so. *)
	  if (4 + n) != 0 then
	    `	add	#{emit_int (4 + n)}, {emit_reg a}\n`;
	  `	fmov.s	{emit_float_high r}, @{emit_reg a}\n`;
	  `	fmov.s	{emit_float_low r}, @-{emit_reg a}\n`;
	  `	add	#{emit_int (-n)}, {emit_reg a}\n`; 4
      end
  | Lop(Istore(size, addr)) ->
      let r = i.arg.(0) in
      let instr =
        match size with
          Byte_unsigned | Byte_signed -> "mov.b"
        | Sixteen_unsigned | Sixteen_signed -> "mov.w"
        | Word | Thirtytwo_signed | Thirtytwo_unsigned -> "mov.l"
	| Single | Double | Double_u -> assert false in
      `	{emit_string instr}	{emit_reg r}, {emit_addressing addr i.arg 1}\n`;
      1
  | Lop(Ialloc n) ->
      let nn = Nativeint.of_int n in
      load_const nn (phys_reg 10);  (* FIXME: Random temporary! *)
      let lbl = label_constant symbol_constants "caml_allocN" 2 in
      `	mov.l	{emit_label lbl}, r11 ! {emit_string "caml_allocN"}\n`;
      `{record_frame i.live}	jsr	@r11\n`;
      `	nop\n`;
      (* FIXME: Delay slot. *)
      `	mov	alloc_ptr, {emit_reg i.res.(0)}\n`;
      `	add	#4, alloc_ptr\n`;
      6
  | Lop(Iintop Ilsl) ->
      (* FIXME: Must ensure i.res.(0) = i.arg.(0). *)
      `	shld	{emit_reg i.arg.(1)}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Iintop(Ilsr | Iasr as op)) ->
      (* FIXME: Need to negate the shift amount! (Where?) *)
      let shname = name_for_shift_operation op in
      ` {emit_string shname}	{emit_reg i.arg.(1)}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Iintop(Icomp cmp)) ->
      let cname, cmpact = name_for_comparison cmp in
      (* Compare i.arg.(0) with i.arg.(1). i.res.(0) set to 1 if true,
         0 if false. *)
      begin match cmpact with
        Normal ->
	  `	cmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	  `	movt	{emit_reg i.res.(0)}\n`; 2
      | Flipped ->
	  `	cmp/{emit_string cname} {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
	  `	movt	{emit_reg i.res.(0)}\n`; 2
      | Inverted ->
	  `	cmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	  `	mov	#-1, {emit_reg i.res.(0)}\n`;
	  `	negc	{emit_reg i.res.(0)}, {emit_reg i.res.(0)}\n`; 3
      | InvFlipped -> assert false
      end
  | Lop(Iintop(Icheckbound)) ->
      (* Uses r11 as temp. Call caml_ml_array_bound_error if arg0 <=u arg1. *)
      let bnd = label_constant symbol_constants "caml_ml_array_bound_error" 2 in
      let skip = new_label () in
      `	cmp/hi	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
      `	bf	{emit_label skip}\n`;
      `	mov.l	{emit_label bnd}, r11 ! {emit_string "caml_ml_array_bound_error"}\n`;
      `	jsr	@r11\n`;
      `	nop\n`;  (* FIXME: Delay slot. *)
      `{emit_label skip}:\n`; 5
  | Lop(Iintop Imul) ->
      (* Result in macl *)
      `	mul.l	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`; 1
  | Lop(Iintop Idiv) ->
      (* Utterly bogus! *)
      `	div1	{emit_reg i.arg.(1)}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Iintop op) ->
      let instr = name_for_int_operation op in
      (* i.arg.(0) must equal i.res.(0). *)
      `	{emit_string instr}	{emit_reg i.arg.(1)}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Iintop_imm((Ilsl | Ilsr as op), n)) ->
      (* i.arg.(0) should equal i.res.(0). *)
      (* Might often not be better to expand immediate shifts like this (?). *)
      let rec emit_imm_shift n =
        let this_amt =
	  if n >= 16 then 16
	  else if n >= 8 then 8
	  else if n >= 2 then 2
	  else if n >= 1 then 1
	  else 0 in
	if this_amt > 0 then begin
	  let shift = name_for_shift_imm_operation op this_amt in
	  `	{emit_string shift}	{emit_reg i.res.(0)}\n`;
	  1 + emit_imm_shift (n - this_amt)
	end else
	  0 in
      emit_imm_shift n
  | Lop(Iintop_imm(Iasr, 1)) ->
      (* i.arg.(0) should equal i.res.(0). *)
      `	shar	{emit_reg i.res.(0)}\n`; 1
  | Lop(Iintop_imm(Icomp (Isigned Ceq | Iunsigned Ceq
			  | Isigned Cne | Iunsigned Cne as cmp), n)) ->
      (* Only good for cmp/eq. Can synthesize cmp/ne too. *)
      let cname, cmpact = name_for_comparison cmp in
      begin match cmpact with
        Normal ->
	  `	cmp/{emit_string cname}	{emit_int n}, {emit_reg i.arg.(0)}\n`;
	  `	movt	{emit_reg i.res.(0)}\n`; 2
      | Inverted ->
	  `	cmp/{emit_string cname}	{emit_int n}, {emit_reg i.arg.(0)}\n`;
	  `	mov	#-1, {emit_reg i.res.(0)}\n`;
	  `	negc	{emit_reg i.res.(0)}, {emit_reg i.res.(0)}\n`; 3
      | Flipped | InvFlipped -> assert false
      end
  | Lop(Iintop_imm((Iadd | Iand | Ior | Ixor as op), n)) ->
      (* For Iand, Ior, Ixor, i.res.(0) = i.arg.(0) = r0.
         For Iadd, i.res.(0) = i.arg.(0). *)
      let instr = name_for_int_operation op in
      `	{emit_string	instr}	#{emit_int n}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Inegf | Iabsf as op) ->
      (* i.arg.(0) = i.res.(0). *)
      let instr = name_for_float_operation op in
      `	{emit_string	instr}	{emit_reg i.res.(0)}\n`; 1
  | Lop(Ifloatofint) ->
      `	lds	{emit_reg i.arg.(0)}, fpul\n`;
      `	float	fpul, {emit_reg i.res.(0)}\n`; 2
  | Lop(Iintoffloat) ->
      `	ftrc	{emit_reg i.arg.(0)}, fpul\n`;
      `	sts	fpul, {emit_reg i.res.(0)}\n`; 2
  | Lop(Iaddf | Isubf | Imulf | Idivf as op) ->
      (* i.arg.(0) = i.res.(0). *)
      let instr = name_for_float_operation op in
      `	{emit_string	instr}	{emit_reg i.arg.(1)}, {emit_reg i.res.(0)}\n`; 1
  | Lop(Ispecific(Istore_postinc sz)) ->
      let opc = match sz with
        Word -> "mov.l"
      | Double_u -> "fmov"
      | _ -> assert false in
      `	{emit_string opc}	{emit_reg i.arg.(0)}, @-{emit_reg i.arg.(1)}\n`;
      1
  | Lop(Iintop_imm((Icheckbound | Imod | Idiv | Imul | Isub), _))
  | Lop(Iintop_imm(Iasr, _))
  | Lop(Iintop_imm(Icomp(Isigned(Cge | Cgt | Cle | Clt)), _))
  | Lop(Iintop_imm(Icomp(Iunsigned(Cge | Cgt | Cle | Clt)), _)) ->
      assert false
  | Lreloadretaddr ->
      (* Clobbers r0. *)
      let n = frame_size() in
      load_const (Nativeint.of_int (n - 4)) (phys_reg 0);
      `	add	r15, r0\n`;
      `	lds.l	@r0+, pr\n`; 3
  | Lreturn ->
      let n = frame_size() in
      ignore(emit_stack_adjustment (Nativeint.of_int n));
      `	rts\n`;
      `	nop\n`; 3  (* FIXME: Delay slot. *)
  | Llabel lbl ->
      `{emit_label lbl}:\n`; 0
  | Lbranch lbl ->
      (* FIXME: Check range! *)
      `	bra	{emit_label lbl}\n`;
      `	nop\n`; 2
  | Lcondbranch(tst, lbl) ->
      (* Range checking! *)
      begin match tst with
        Itruetest ->
	  `	cmp/eq	#0, {emit_reg i.arg.(0)}\n`; (* Must be r0. *)
	  `	bf	{emit_label lbl}\n`; 2  (* FIXME: Delay slot. *)
      | Ifalsetest ->
          `	cmp/eq	#0, {emit_reg i.arg.(0)}\n`; (* Must be r0. *)
          `	bt	{emit_label lbl}\n`; 2  (* FIXME: Delay slot. *)
      | Iinttest cmp ->
	  let cname, cmpact = name_for_comparison cmp in
	  (* FIXME: Delay slots! *)
	  begin match cmpact with
	    Normal ->
	      `	cmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	      `	bt	{emit_label lbl}\n`; 2
	  | Flipped ->
	      `	cmp/{emit_string cname}	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
	      `	bt	{emit_label lbl}\n`; 2
	  | Inverted ->
	      `	cmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	      `	bf	{emit_label lbl}\n`; 2
	  | InvFlipped -> assert false
	  end
      | Iinttest_imm((Isigned Ceq | Iunsigned Ceq | Isigned Cne
		      | Iunsigned Cne as cmp), n) ->
	  let cname, cmpact = name_for_comparison cmp in
	  begin match cmpact with
	    Normal ->
	      `	cmp/{emit_string cname}	#{emit_int n}, {emit_reg i.arg.(0)}\n`;
	      `	bt	{emit_label lbl}\n`; 2
	  | Inverted ->
	      `	cmp/{emit_string cname}	#{emit_int n}, {emit_reg i.arg.(0)}\n`;
	      `	bf	{emit_label lbl}\n`; 2
	  | Flipped | InvFlipped -> assert false
	  end
      | Iinttest_imm(_, _) -> assert false
      | Ifloattest(cmp, neg) ->
	  let cname, cmpact = name_for_float_comparison cmp neg in
	  begin match cmpact with
	    Normal ->
	      `	fcmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	      `	bt	{emit_label lbl}\n`
	  | Inverted ->
	      `	fcmp/{emit_string cname}	{emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`;
	      `	bf	{emit_label lbl}\n`
	  | Flipped ->
	      `	fcmp/{emit_string cname}	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
	      `	bt	{emit_label lbl}\n`
	  | InvFlipped ->
	      `	fcmp/{emit_string cname}	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
	      `	bf	{emit_label lbl}\n`
	  end; 2
      | Ioddtest ->
	  (* T=1 if even. *)
	  `	tst	#1, {emit_reg i.arg.(0)}\n`;
	  `	bf	{emit_label lbl}\n`; 2
      | Ieventest ->
	  (* T=1 if even. *)
	  `	tst	#1, {emit_reg i.arg.(0)}\n`;
	  `	bt	{emit_label lbl}\n`; 2
      end
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
      (* FIXME: Clobbers i.arg.(0). Make that OK. *)
      `	dt	{emit_reg i.arg.(0)}\n`;
      begin match lbl1 with
	None -> ()
      | Some lbl -> `	bt	{emit_label lbl}\n`
      end;
      begin match lbl2 with
	None -> ()
      | Some lbl ->
	  `	cmp/pl	{emit_reg i.arg.(0)}\n`;
	  `	bt	{emit_label lbl}\n`
      end;
      begin match lbl0 with
        None -> ()
      | Some lbl ->
      	  `	cmp/pz	{emit_reg i.arg.(0)}\n`;
	  `	bf	{emit_label lbl}\n`
      end;
      6
  | Lswitch jumptbl ->
      (* Clobbers r0, i.arg.(0) without asking. *)
      let tblstart = new_label () in
      `	mova	{emit_label tblstart}, r0\n`;
      `	shll2	{emit_reg i.arg.(0)}\n`;
      `	mov.l	@(r0, {emit_reg i.arg.(0)}), r0\n`;
      `	jmp	@r0\n`;
      `	nop\n`;
      `	.align 2\n`;
      `{emit_label tblstart}:\n`;
      for i = 0 to Array.length jumptbl - 1 do
        `	.long	{emit_label jumptbl.(i)}\n`
      done;
      6 + 2 * (Array.length jumptbl)
  | Lsetuptrap lbl ->
      (* FIXME: Range. *)
      `	bsr	{emit_label lbl}\n`;
      `	nop\n`; 2  (* FIXME: Delay slot *)
  | Lpushtrap ->
      stack_offset := !stack_offset + 8;
      `	sts.l	pr, @-r15\n`;
      `	mov.l	trap_ptr, @-r15\n`;
      `	mov	trap_ptr, r15\n`; 3
  | Lpoptrap ->
      `	mov.l	@r15+, trap_ptr\n`;
      `	lds.l	@r15+, pr\n`;
      stack_offset := !stack_offset - 8; 2
  | Lraise ->
      (* Clobbers PR. *)
      `	mov	trap_ptr, r15\n`;
      `	mov.l	@r15+, trap_ptr\n`;
      `	lds.l	@r15+, pr\n`;
      `	rts\n`;
      `	nop\n`; 5  (* FIXME: Delay slot. *)

(* Emission of an instruction sequence *)

let no_fallthrough = function
    Lop(Itailcall_ind | Itailcall_imm _) -> true
  | Lreturn -> true
  | Lbranch _ -> true
  | Lswitch _ -> true
  | Lraise -> true
  | _ -> false

let rec emit_all ninstr i =
  if i.desc = Lend then () else begin
    let n = emit_instr i in
    let ninstr' = ninstr + n in
    let limit = 511 - !num_literals in
    if ninstr' >= limit - 32 && no_fallthrough i.desc then begin
      emit_constants();
      emit_all 0 i.next
    end else
    if ninstr' >= limit then begin
      let lbl = new_label() in
      `	bra	{emit_label lbl}\n`;
      `	nop\n`;  (* FIXME: Delay slot. *)
      emit_constants();
      `{emit_label lbl}:\n`;
      emit_all 0 i.next
    end else
      emit_all ninstr' i.next
  end

(* Emission of a function declaration *)

let fundecl fundecl =
  function_name := fundecl.fun_name;
  fastcode_flag := fundecl.fun_fast;
  tailrec_entry_point := new_label();
  stack_offset := 0;
  Hashtbl.clear symbol_constants;
  Hashtbl.clear float_constants;
  Hashtbl.clear int_constants;
  `	.text\n`;
  `	.global	{emit_symbol fundecl.fun_name}\n`;
  `{emit_symbol fundecl.fun_name}:\n`;
  let n = frame_size() in
  ignore(emit_stack_adjustment (Nativeint.of_int (-n)));
  if !contains_calls then begin
    (* FIXME: Clobbers r0 *)
    `	mov	r15, r0\n`;
    add_const (Nativeint.of_int n) (phys_reg 0);
    `	sts.l	pr, @-r15\n`;
  end;
  `{emit_label !tailrec_entry_point}:\n`;
  emit_all 0 fundecl.fun_body;
  emit_constants()

(* Emission of data *)

let emit_item = function
    Cglobal_symbol s ->
      `	.global	{emit_symbol s}\n`;
  | Cdefine_symbol s ->
      `{emit_symbol s}:\n`
  | Cdefine_label lbl ->
      `{emit_label (10000 + lbl)}:\n`
  | Cint8 n ->
      `	.byte	{emit_int n}\n`
  | Cint16 n ->
      `	.short	{emit_int n}\n`
  | Cint32 n ->
      `	.long	{emit_nativeint	n}\n`
  | Cint n ->
      `	.long	{emit_nativeint n}\n`
  | Csingle f ->
      `	.float	{emit_string	f}\n`
  | Cdouble f ->
      let n = Int64.bits_of_float (float_of_string f) in
      let lo = Int64.to_nativeint n in
      let hi = Int64.to_nativeint (Int64.shift_right n 32) in
      `	.align	0\n`;
      ` .long {emit_nativeint lo}\n`;
      ` .long {emit_nativeint hi}\n`
  | Csymbol_address s ->
      `	.long	{emit_symbol s}\n`
  | Clabel_address lbl ->
      `	.long	{emit_label (10000 + lbl)}\n`
  | Cstring s ->
      emit_string_directive "   .ascii  " s
  | Cskip n ->
      if n > 0 then `	.space	{emit_int n}\n`
  | Calign n ->
      `	.align	{emit_int(Misc.log2 n)}\n`

let data l =
  `	.data\n`;
  List.iter emit_item l

(* Beginning / end of an assembly file *)

let begin_assembly() =
  `#define trap_ptr r14\n`;
  `#define alloc_ptr r12\n`;
  `#define alloc_limit r13\n`;
  let lbl_begin = Compilenv.make_symbol (Some "data_begin") in
  `	.data\n`;
  `	.global	{emit_symbol lbl_begin}\n`;
  `{emit_symbol lbl_begin}:\n`;
  let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
  `	.text\n`;
  `	.global	{emit_symbol lbl_begin}\n`;
  `{emit_symbol lbl_begin}:\n`

let end_assembly () =
  let lbl_end = Compilenv.make_symbol (Some "code_end") in
  `	.text\n`;
  `	.global	{emit_symbol lbl_end}\n`;
  `{emit_symbol lbl_end}:\n`;
  let lbl_end = Compilenv.make_symbol (Some "data_end") in
  `	.data\n`;
  `	.global	{emit_symbol lbl_end}\n`;
  `{emit_symbol lbl_end}:\n`;
  `	.long	0\n`;
  let lbl = Compilenv.make_symbol (Some "frametable") in
  `	.data\n`;
  `	.global	{emit_symbol lbl}\n`;
  `{emit_symbol lbl}:\n`;
  `	.long	{emit_int (List.length !frame_descriptors)}\n`;
  List.iter emit_frame !frame_descriptors;
  frame_descriptors := []
